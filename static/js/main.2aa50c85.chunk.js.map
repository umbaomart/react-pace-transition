{"version":3,"sources":["components/title.js","pages/home.js","pages/about.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Title","lineContent","lineContent2","line1","useRef","line2","useEffect","gsap","from","delay","ease","y","stagger","amount","className","ref","el","Home","About","Header","to","exact","activeStyle","fontWeight","color","routes","path","name","Component","console","log","CSSTransition","App","onEnter","node","children","firstElementChild","lastElementChild","opacity","onExit","map","key","match","in","timeout","onEntering","classNames","unmountOnExit","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAkCeA,EA/BD,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACtBC,EAAQC,iBAAO,MACfC,EAAQD,iBAAO,MAanB,OAXAE,qBAAU,WACNC,IAAKC,KAAK,CAACL,EAAOE,GAAQ,GAAK,CAC3BI,MAAO,GACPC,KAAM,aACNC,EAAG,GACHC,QAAS,CACLC,OAAQ,UAMhB,wBAAIC,UAAU,cACV,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OAAOC,IAAK,SAAAC,GAAE,OAAKb,EAAQa,IACrCf,IAGT,yBAAKa,UAAU,aACX,yBAAKA,UAAU,OAAOC,IAAK,SAAAC,GAAE,OAAKX,EAAQW,IACrCd,MCRNe,EAhBF,WACT,OACI,yBAAKH,UAAU,SACX,kBAAC,EAAD,CACIb,YAAY,cACZC,aAAa,cAEjB,6BACI,uBAAGY,UAAU,SAAb,iVCKDI,EAbD,WACV,OACI,yBAAKJ,UAAU,SACX,kBAAC,EAAD,CAAOb,YAAY,cAAcC,aAAa,eAC9C,6BACI,uBAAGY,UAAU,SAAb,8V,OCQDK,EAbA,WACX,OACI,yBAAKL,UAAU,UACX,kBAAC,IAAD,CAASM,GAAG,yBAAyBC,OAAK,EAACC,YAAa,CAAEC,WAAY,OAAQC,MAAO,QAArF,QAGA,kBAAC,IAAD,CAASJ,GAAG,+BAA+BC,OAAK,EAACC,YAAa,CAAEC,WAAY,OAAQC,MAAO,QAA3F,WCCNC,EAAS,CACb,CACEC,KAAM,yBACNC,KAAM,OACNC,UAAWX,GAEb,CACES,KAAM,+BACNC,KAAM,QACNC,UAAWV,IAIfW,QAAQC,IAAIC,KAsEGC,MAlEf,WACE,IAAMC,EAAU,SAAAC,GACdL,QAAQC,IAAII,EAAKC,UAEjB5B,IAAKC,KACH,CAAC0B,EAAKC,SAAS,GAAGC,kBAAmBF,EAAKC,SAAS,GAAGE,kBACtD,GACA,CACE1B,EAAG,GACHF,MAAO,GACPC,KAAM,eACN4B,QAAS,EACT1B,QAAS,CACPC,OAAQ,OAMV0B,EAAS,SAAAL,GACbL,QAAQC,IAAII,EAAKC,SAAS,IAC1B5B,IAAKa,GACH,CAACc,EAAKC,SAAS,GAAGC,kBAAmBF,EAAKC,SAAS,GAAGE,kBACtD,GACA,CACE1B,GAAI,GACJD,KAAM,eACNE,QAAS,CACPC,OAAQ,OAMhB,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKC,UAAU,aAEXW,EAAOe,KAAI,gBAAGb,EAAH,EAAGA,KAAMD,EAAT,EAASA,KAAME,EAAf,EAAeA,UAAf,OACT,kBAAC,IAAD,CACEa,IAAKd,EACLD,KAAMA,EAAML,OAAK,IAEhB,gBAAGqB,EAAH,EAAGA,MAAH,OACC,kBAACX,EAAA,EAAD,CACEY,GAAa,MAATD,EACJE,QAAS,KACTL,OAAQA,EACRM,WAAYZ,EACZa,WAAW,OACXC,eAAa,GACb,yBAAKjC,UAAU,QACb,kBAACc,EAAD,iBCpEAoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCVNU,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.2aa50c85.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { gsap } from \"gsap\";\r\n\r\nconst Title = ({ lineContent, lineContent2 }) => {\r\n    let line1 = useRef(null);\r\n    let line2 = useRef(null)\r\n\r\n    useEffect(() => {\r\n        gsap.from([line1, line2], 0.8, {\r\n            delay: 0.8,\r\n            ease: \"power3.out\",\r\n            y: 64,\r\n            stagger: {\r\n                amount: 0.15\r\n            }\r\n        })\r\n    })\r\n\r\n    return (\r\n        <h1 className='page-title'>\r\n            <div className=\"line-wrap\">\r\n                <div className=\"line\" ref={el => (line1 = el)}>\r\n                    {lineContent}\r\n                </div>\r\n            </div>\r\n            <div className=\"line-wrap\">\r\n                <div className=\"line\" ref={el => (line2 = el)}>\r\n                    {lineContent2}\r\n                </div>\r\n            </div>\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React from 'react'\r\nimport Title from '../components/title';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"inner\">\r\n            <Title\r\n                lineContent=\"This is the\"\r\n                lineContent2=\"Home Page\"\r\n            />\r\n            <div>\r\n                <p className=\"other\">\r\n                    People. Ed a set tone, time me terms, first you a english with think can a retired noting thought, someone project the bale that watched go into brown was finger. My the concepts with the original it time was associates, odd travelling from least, their weary deeply of I in could handed they shreds blind being ruining by I hand.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\nimport Title from '../components/title';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"inner\">\r\n            <Title lineContent=\"This is the\" lineContent2=\"About Page\" />\r\n            <div>\r\n                <p className=\"other\">\r\n                    People. Expenses rolled a set tone, time me terms, first you a english with think can a retired noting thought, someone project the bale that watched go into brown was finger. My the concepts with the original it time was associates, odd travelling from least, their weary deeply of I in could handed they shreds blind being ruining by I hand.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <NavLink to=\"/react-pace-transition\" exact activeStyle={{ fontWeight: 'bold', color: 'red' }}>\r\n                Home\r\n            </NavLink>\r\n            <NavLink to=\"/react-pace-transition/about\" exact activeStyle={{ fontWeight: 'bold', color: 'red' }}>\r\n                About\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport './App.scss';\n// eslint-disable-next-line\nimport { Route } from 'react-router-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport Home from './pages/home';\nimport About from './pages/about';\nimport Header from './components/header';\nimport gsap from 'gsap';\n\nconst routes = [\n  {\n    path: '/react-pace-transition',\n    name: 'Home',\n    Component: Home\n  },\n  {\n    path: '/react-pace-transition/about',\n    name: 'About',\n    Component: About\n  }\n]\n\nconsole.log(CSSTransition);\n\n\n\nfunction App () {\n  const onEnter = node => {\n    console.log(node.children);\n\n    gsap.from(\n      [node.children[0].firstElementChild, node.children[0].lastElementChild],\n      0.6,\n      {\n        y: 30,\n        delay: 0.6,\n        ease: \"power3.InOut\",\n        opacity: 0,\n        stagger: {\n          amount: 0.6\n        }\n      }\n    );\n  };\n\n  const onExit = node => {\n    console.log(node.children[0]);\n    gsap.to(\n      [node.children[0].firstElementChild, node.children[0].lastElementChild],\n      0.6,\n      {\n        y: -30,\n        ease: \"power3.InOut\",\n        stagger: {\n          amount: 0.2\n        }\n      }\n    );\n  };\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        {\n          routes.map(({ name, path, Component }) => (\n            <Route\n              key={name}\n              path={path} exact\n            >\n              {({ match }) => (\n                <CSSTransition\n                  in={match != null}\n                  timeout={1200}\n                  onExit={onExit}\n                  onEntering={onEnter}\n                  classNames=\"page\"\n                  unmountOnExit>\n                  <div className=\"page\">\n                    <Component />\n                  </div>\n                </CSSTransition>\n              )}\n\n            </Route>\n          ))\n        }\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}